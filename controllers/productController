const productService = require("../service/productService");
const mongoose = require("mongoose");

//GET -> Busca por todos produtos
const findAllProductsController = async (req, res) => {
try {
    const products = await productService.findAllProductsService();
    if (!products || products.length === 0) { //caso de nao ter nada retornado
      return res.status(404).send({ message: "Nenhum produto encontrado." });
    }
    return res.status(200).send(products);
  }catch (error) {
  console.error(error); // mostra o erro no terminal
  return res.status(500).send({ message: "Erro ao buscar produtos.", error: error.message || error });
}
};

// GET -> buscar por um id espec칤fico
const findProductByIdController = async (req, res) => {
  try {
    const id = req.params.id; // melhor pegar o ID da URL (params), n칚o do body

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).send({ message: "ID inv치lido." });
    }

    const product = await productService.findProductByIdService(id);

    if (!product) {
      return res.status(404).send({ message: "Produto n칚o encontrado." });
    }

    return res.status(200).send(product);
  } catch (error) {
    return res.status(500).send({ message: "Erro ao buscar produto.", error });
  }
};

// POST -> criar novo produto
const createProductController = async (req, res) => {
  try {
    const body = req.body;

    if (!body.nome || !body.preco) {
      return res.status(400).send({ message: "Nome e pre칞o s칚o obrigat칩rios." });
    }

    const created = await productService.createProductService(body);

    return res.status(201).send({
      message: "Produto criado com sucesso!",
      product: created,
    });
  } catch (error) {
    return res.status(500).send({ message: "Erro ao criar produto.", error });
  }
};

// PUT - Atualizar produto
const updateProductController = async (req, res) => {
  try {
    const id = req.params.id; // 游댳 use params para rota RESTful
    const body = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).send({ message: "ID inv치lido." });
    }

    const updated = await productService.updateProductService(id, body);

    if (!updated) {
      return res.status(404).send({ message: "Produto n칚o encontrado." });
    }

    return res.status(200).send({
      message: "Produto atualizado com sucesso!",
      product: updated,
    });
  } catch (error) {
    return res.status(500).send({ message: "Erro ao atualizar produto.", error });
  }
};

// DELETE - Remover produto
const deleteProductController = async (req, res) => {
  try {
    const  id  = req.params.id;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).send({ message: "ID inv치lido." });
    }

    const deleted = await productService.deleteProductByIdService(id);

    if (!deleted) {
      return res.status(404).send({ message: "Produto n칚o encontrado." });
    }

    return res.status(200).send({ message: "Produto removido com sucesso!" });
  } catch (error) {
    return res.status(500).send({ message: "Erro ao deletar produto.", error });
  }
};

module.exports = {
  findAllProductsController,
  findProductByIdController,
  createProductController,
  updateProductController,
  deleteProductController,
};
